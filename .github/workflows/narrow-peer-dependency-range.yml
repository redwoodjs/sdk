name: Narrow Peer Dependency Range

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "The npm package name (e.g., wrangler)"
        required: true
        type: string
      last_good_version:
        description: "The last known good version (e.g., 4.35.0)"
        required: true
        type: string
      branch_name:
        description: "The branch name of the failing PR"
        required: true
        type: string

jobs:
  narrow-peer-dependency-range:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }}

      - name: Setup Node.js and pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Create Pinning Script
        id: create_script
        run: |
          cat << 'EOF' > narrow-range-script.mjs
          import fs from 'fs/promises';
          import path from 'path';
          import semver from 'semver';

          async function run() {
            const packageName = process.env.PACKAGE_NAME;
            const lastGoodVersion = process.env.LAST_GOOD_VERSION;

            if (!packageName || !lastGoodVersion) {
              throw new Error('PACKAGE_NAME and LAST_GOOD_VERSION env vars are required.');
            }

            console.log(`Pinning ${packageName} in starters to known good version ${lastGoodVersion}`);

            const startersDir = 'starters';
            const starterDirs = await fs.readdir(startersDir);

            for (const starter of starterDirs) {
              const packageJsonPath = path.join(startersDir, starter, 'package.json');
              try {
                const content = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));
                if (content.devDependencies && content.devDependencies[packageName]) {
                  console.log(`Updating ${packageJsonPath}...`);
                  content.devDependencies[packageName] = lastGoodVersion;
                  await fs.writeFile(packageJsonPath, JSON.stringify(content, null, 2) + '\n');
                }
              } catch (e) {
                console.warn(`Could not process ${packageJsonPath}: ${e.message}`);
              }
            }
            
            console.log('Constraining peer dependency in sdk/package.json');
            const sdkPackageJsonPath = 'sdk/package.json';
            const sdkContent = JSON.parse(await fs.readFile(sdkPackageJsonPath, 'utf-8'));
            
            if (sdkContent.peerDependencies && sdkContent.peerDependencies[packageName]) {
                const currentRange = sdkContent.peerDependencies[packageName];
                const minVersion = semver.minVersion(currentRange).version;
                
                const brokenVersion = semver.inc(lastGoodVersion, 'minor');

                sdkContent.peerDependencies[packageName] = `>=${minVersion} <${brokenVersion}`;
                console.log(`Updated peer dependency range to: ${sdkContent.peerDependencies[packageName]}`);

                await fs.writeFile(sdkPackageJsonPath, JSON.stringify(sdkContent, null, 2) + '\n');
            }
          }

          run().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF

      - name: Run Script to Narrow Range
        env:
          PACKAGE_NAME: ${{ github.event.inputs.package_name }}
          LAST_GOOD_VERSION: ${{ github.event.inputs.last_good_version }}
        run: node narrow-range-script.mjs

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "chore(deps): narrow peer dependency range for ${{ github.event.inputs.package_name }}"
          git push
