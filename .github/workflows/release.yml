name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "The type of version bump (patch, minor, explicit, test)"
        required: true
        type: string
        default: "patch"
      version:
        description: "The explicit version to use (for 'explicit' type)"
        required: false
        type: string
      create_gh_release:
        description: "If false, skips creating a GitHub release."
        required: false
        type: boolean
        default: true
      skip_smoke_tests:
        description: "If true, bypasses the smoke testing step. Use with caution."
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  release:
    if: github.ref == 'refs/heads/main' || github.event.inputs.version_type == 'test'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # We need to fetch all history for semver to work correctly and to push changes.
          fetch-depth: 0
          # This token should have write permissions to the repository.
          # It's recommended to use a dedicated bot account's PAT.
          # The secret should be named GH_TOKEN_FOR_RELEASES
          token: ${{ secrets.GH_TOKEN_FOR_RELEASES }}

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Setup .npmrc for publishing
        working-directory: sdk
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Run release script
        id: release_script
        working-directory: sdk
        run: |
          COMMAND="./scripts/release.sh ${{ github.event.inputs.version_type }}"
          if [[ "${{ github.event.inputs.version_type }}" == "explicit" ]]; then
            if [[ -z "${{ github.event.inputs.version }}" ]]; then
              echo "::error::The 'version' input is required when 'version_type' is 'explicit'."
              exit 1
            fi
            COMMAND="$COMMAND --version ${{ github.event.inputs.version }}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "::error::The 'version' input can only be used when 'version_type' is 'explicit'."
            exit 1
          fi
          if [[ "${{ github.event.inputs.skip_smoke_tests }}" == "true" ]]; then
            COMMAND="$COMMAND --skip-smoke-tests"
          fi
          echo "Running command: $COMMAND"
          eval $COMMAND

      - name: Create GitHub Release
        if: success() && github.event.inputs.create_gh_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_RELEASES }}
        run: |
          FLAGS="--generate-notes"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          VERSION="${{ github.event.inputs.version }}"

          if [[ "$VERSION_TYPE" == "patch" || "$VERSION_TYPE" == "minor" ]]; then
            FLAGS="$FLAGS --latest"
          elif [[ "$VERSION_TYPE" == "explicit" ]]; then
            # For explicit versions, we check the version string to determine if it's a pre-release
            if [[ "$VERSION" == *"-beta."* ]]; then
              FLAGS="$FLAGS --latest"
            elif [[ "$VERSION" == *"-"* ]]; then
              FLAGS="$FLAGS --prerelease"
            else
              FLAGS="$FLAGS --latest"
            fi
          elif [[ "$VERSION_TYPE" == "test" ]]; then
            FLAGS="$FLAGS --prerelease"
          fi

          echo "Creating GitHub release for tag ${{ env.TAG_NAME }} with flags: $FLAGS"
          gh release create ${{ env.TAG_NAME }} $FLAGS

      - name: Prune node_modules for artifact upload
        if: failure() && steps.release_script.outputs.project-dir
        run: |
          echo "Pruning node_modules to reduce artifact size..."
          find ${{ steps.release_script.outputs.project-dir }}/node_modules -mindepth 1 -maxdepth 1 -not -name "rwsdk" -exec rm -rf {} +
          echo "Pruning complete."

      - name: Upload logs on failure
        if: failure() && steps.release_script.outputs.project-dir
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-failure-logs
          path: ${{ steps.release_script.outputs.project-dir }}

      - name: Upload smoke test artifacts
        if: always() && steps.release_script.outputs.project-dir
        uses: actions/upload-artifact@v4
        with:
          name: release-smoke-test-artifacts
          path: ${{ steps.release_script.outputs.project-dir }}/artifacts
          retention-days: 7
