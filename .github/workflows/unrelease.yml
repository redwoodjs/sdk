name: Unrelease

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The full version to unrelease (e.g., 0.1.15)"
        required: true
      reason:
        description: "The reason for deprecating the package on npm"
        required: true
        default: "This version has been unpublished due to a critical issue."

permissions:
  contents: write

jobs:
  unrelease:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This token should have write permissions to the repository.
          token: ${{ secrets.GH_TOKEN_FOR_RELEASES }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup .npmrc for publishing
        working-directory: sdk
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Deprecate package on npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: sdk
        run: |
          echo "Deprecating rwsdk@${{ github.event.inputs.version }} on npm..."
          npm deprecate rwsdk@"${{ github.event.inputs.version }}" "${{ github.event.inputs.reason }}"

      - name: Delete GitHub Release and Git Tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_RELEASES }}
        run: |
          TAG_NAME="v${{ github.event.inputs.version }}"

          IS_LATEST=$(gh release view "$TAG_NAME" --json isLatest -q '.isLatest' 2>/dev/null || echo "false")

          if [[ "$IS_LATEST" == "true" ]]; then
            echo "$TAG_NAME is the latest release. Finding the next latest release..."
            NEW_LATEST_TAG=$(gh release list --limit 100 --json tagName,isPrerelease,publishedAt \
              | jq -r --arg currentTag "$TAG_NAME" '
                  map(select(.isPrerelease == false and .tagName != $currentTag))
                  | sort_by(.publishedAt) | reverse | .[0].tagName
                ')

            if [[ -n "$NEW_LATEST_TAG" && "$NEW_LATEST_TAG" != "null" ]]; then
              echo "Marking $NEW_LATEST_TAG as the new latest release."
              gh release edit "$NEW_LATEST_TAG" --latest
            else
              echo "No other stable release found to mark as latest."
            fi
          fi

          echo "Checking for GitHub release with tag $TAG_NAME..."
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "Found release. Deleting GitHub release for tag $TAG_NAME..."
            gh release delete "$TAG_NAME" --yes
          else
            echo "No release found for tag $TAG_NAME. Skipping deletion."
          fi

          echo "Deleting git tag $TAG_NAME..."
          git push --delete origin "$TAG_NAME"
