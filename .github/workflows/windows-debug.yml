name: Windows Debug Session

on:
  workflow_dispatch:
    inputs:
      cursorTunnelName:
        description: "Optional Cursor tunnel name (<=20 chars); leave blank for random"
        required: false
      gitUserName:
        description: "Git user name (from local config)"
        required: false
      gitUserEmail:
        description: "Git user email (from local config)"
        required: false

jobs:
  debug-session:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        shell: pwsh
        run: |
          corepack enable
          pnpm install

      - name: Configure Git
        shell: pwsh
        run: |
          if ("${{ inputs.gitUserName }}" -ne "") {
            git config --global user.name "${{ inputs.gitUserName }}"
          }
          if ("${{ inputs.gitUserEmail }}" -ne "") {
            git config --global user.email "${{ inputs.gitUserEmail }}"
          }

      - name: Download Cursor CLI (bash)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE/.tmp/cursor_cli"
          curl -Lk "https://api2.cursor.sh/updates/download-latest?os=cli-win32-x64" -o "$GITHUB_WORKSPACE/.tmp/cursor_cli/cursor_cli.tar.gz"

      - name: Extract Cursor CLI
        shell: pwsh
        run: |
          $CursorDir = "$env:GITHUB_WORKSPACE\.tmp\cursor_cli"
          $CursorArchive = "$CursorDir\cursor_cli.tar.gz"
          tar -xvf $CursorArchive -C $CursorDir | Out-Null
          Write-Host "Cursor CLI extracted to $CursorDir"

      - name: Download ad script
        shell: pwsh
        run: |
          $AdScriptPath = "$env:GITHUB_WORKSPACE\.tmp\bin\ad"
          $AdScriptDir = Split-Path -Parent $AdScriptPath
          if (-not (Test-Path $AdScriptDir)) {
            New-Item -ItemType Directory -Path $AdScriptDir -Force | Out-Null
          }
          
          # Download from gist (replace with actual URL)
          $GistUrl = "https://gist.githubusercontent.com/justinvdm/fcd6da9d28057addd263214d90793137/raw/c19b89ccaef25acc776cd9477b77f9ae92cb2664/ad"
          Invoke-WebRequest -Uri $GistUrl -OutFile $AdScriptPath
          
          # Make executable (bash will handle this)
          bash -c "chmod +x '$AdScriptPath'"
          
          # Add to PATH for PowerShell
          $env:Path += ";$AdScriptDir"
          [Environment]::SetEnvironmentVariable("Path", $env:Path, [EnvironmentVariableTarget]::User)
          
          Write-Host "ad script downloaded to: $AdScriptPath"

      - name: Setup Auto-Run Scripts
        shell: pwsh
        run: |
          # Setup PowerShell profile that auto-runs tunnel and includes git aliases
          $ProfileDir = Split-Path -Parent $PROFILE
          if (-not (Test-Path $ProfileDir)) {
            New-Item -ItemType Directory -Path $ProfileDir -Force | Out-Null
          }
          
          $TunnelCmd = if ("${{ inputs.cursorTunnelName }}" -ne "") {
            "& '.\.tmp\cursor_cli\cursor.exe' tunnel --name '${{ inputs.cursorTunnelName }}' --verbose"
          } else {
            "& '.\.tmp\cursor_cli\cursor.exe' tunnel --random-name --verbose"
          }
          
          # Git aliases as PowerShell functions
          $GitAliases = @"
# Git aliases
function gs { git status @args }
function ga { git add @args }
function gf { git fetch @args }
function gpll { git pull @args }
function gpsh { git push @args }
function gpshu { git push -u @args }
function gpshh { git pull; git push }
function gm { git merge @args }
function grm { git rm @args }
          function gch { git checkout @args }
          function gffs { git flow feature start @args }
          function gfff { git flow feature finish @args }
          function grh { git reset HEAD @args }
          function gb { git branch @args }
          function grb { git rebase @args }
function gll { param([string]`$args) git log `$args | less }
function gd { git diff @args }
function gds { git diff --staged @args }
function gd@ { param([int]`$n) git diff HEAD~(`$n + 1) HEAD~`$n }
function gl { git log @args }
function gc { git commit @args }
function gcm { git commit -m @args }
function gca { git commit --amend @args }
function gst { git stash @args }
function gssh { param([int]`$n) git stash show -p "stash@{`$n}" }
function gsap { param([int]`$n) git stash apply "stash@{`$n}" }
function gsa { git stash; git stash apply "stash@{0}" }
function gcp { git cherry-pick @args }

# Add ad script to PATH
`$env:Path += ";$env:GITHUB_WORKSPACE\.tmp\bin"
"@
          
          $AutoRunScript = @"
# Auto-run script for Windows Debug Session
Write-Host "`nðŸš€ Auto-starting Cursor tunnel...`n" -ForegroundColor Cyan
Set-Location "$env:GITHUB_WORKSPACE"

$GitAliases

$TunnelCmd
"@
          
          Set-Content -Path $PROFILE -Value $AutoRunScript
          Write-Host "PowerShell profile created at: $PROFILE"
          
          # Setup bash profile to auto-launch PowerShell
          $BashProfile = "$env:USERPROFILE\.bashrc"
          $BashAutoRun = @"
# Auto-launch PowerShell for Windows Debug Session
if [ -z "$PS_LAUNCHED" ]; then
  export PS_LAUNCHED=1
  echo "ðŸš€ Launching PowerShell session..."
  pwsh.exe
fi
"@
          
          Set-Content -Path $BashProfile -Value $BashAutoRun -Encoding UTF8
          Write-Host "Bash profile created at: $BashProfile"

      - name: Start Interactive Debug Session
        uses: mxschmitt/action-tmate@v3
