name: Windows Debug Session

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Setup SSH Server and Tunnel
        shell: powershell
        run: |
          # 1. Set a secure, random password for the runneradmin user
          $password = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 32 | ForEach-Object { [char]$_ })
          $user = "runneradmin"
          Add-Type -AssemblyName System.Web
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $userAccount = Get-LocalUser -Name $user
          $userAccount | Set-LocalUser -Password $securePassword

          # 2. Ensure the OpenSSH server is running
          Start-Service sshd

          # 3. Install ngrok
          choco install ngrok -y

          # 4. Start ngrok tunnel in the background
          Start-Process -FilePath "ngrok" -ArgumentList "tcp 22" -WindowStyle Hidden

          # 5. Wait for ngrok to initialize and get the public URL
          $tunnelInfo = $null
          $maxAttempts = 10
          $attempt = 0
          while ($tunnelInfo -eq $null -and $attempt -lt $maxAttempts) {
            Start-Sleep -Seconds 2
            try {
              $tunnelInfo = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -ErrorAction Stop
            } catch {
              Write-Host "ngrok API not ready yet. Retrying..."
              $attempt++
            }
          }

          if ($tunnelInfo -eq $null) {
            Write-Error "Failed to get ngrok tunnel info after multiple attempts."
            exit 1
          }

          $publicUrl = $tunnelInfo.tunnels[0].public_url
          $hostname, $port = ($publicUrl -replace "tcp://", "").Split(":")

          # 6. Output connection details to a JSON file for the artifact
          $connectionDetails = @{
            Host = $hostname
            Port = $port
            User = $user
            Password = $password
          } | ConvertTo-Json
          Set-Content -Path "connection.json" -Value $connectionDetails

      - name: Upload connection details
        uses: actions/upload-artifact@v4
        with:
          name: ssh-connection-details
          path: connection.json

      - name: Keep workflow alive
        run: sleep 3600
